{{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-envoy-config-rosocp-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: rosocp-api-envoy
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.jwt_auth.envoy.port }}
        per_connection_buffer_limit_bytes: 32768
        connection_balance_config:
          exact_balance: {}
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: rosocp_api_http
              codec_type: AUTO
              request_timeout: 60s
              stream_idle_timeout: 300s
              max_request_headers_kb: 96
              common_http_protocol_options:
                idle_timeout: 300s
                max_connection_duration: 600s
                headers_with_underscores_action: REJECT_REQUEST
              http2_protocol_options:
                max_concurrent_streams: 100
                initial_stream_window_size: 65536
                initial_connection_window_size: 1048576
              use_remote_address: true
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    json_format:
                      start_time: "%START_TIME%"
                      method: "%REQ(:METHOD)%"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      protocol: "%PROTOCOL%"
                      response_code: "%RESPONSE_CODE%"
                      response_flags: "%RESPONSE_FLAGS%"
                      bytes_received: "%BYTES_RECEIVED%"
                      bytes_sent: "%BYTES_SENT%"
                      duration: "%DURATION%"
                      upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      user_agent: "%REQ(USER-AGENT)%"
                      request_id: "%REQ(X-REQUEST-ID)%"
                      authority: "%REQ(:AUTHORITY)%"
                      upstream_host: "%UPSTREAM_HOST%"
                      upstream_cluster: "%UPSTREAM_CLUSTER%"
              route_config:
                name: local_route
                virtual_hosts:
                - name: backend
                  # Wildcard domain appropriate for sidecar pattern:
                  # - External host validation occurs at OpenShift Route level
                  # - Envoy receives internal pod traffic (localhost/service names)
                  # - No host header injection risk in this architecture
                  domains: ["*"]
                  routes:
                  # Health endpoint - bypass authentication for Kubernetes probes
                  - match:
                      path: "/status"
                    route:
                      cluster: rosocp-api-backend
                      timeout: 5s
                    typed_per_filter_config:
                      envoy.filters.http.ext_authz:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                        disabled: true
                  # All other routes - require authentication
                  - match:
                      prefix: "/"
                    route:
                      cluster: rosocp-api-backend
                      timeout: 30s
                      retry_policy:
                        retry_on: 5xx,reset,connect-failure,refused-stream
                        num_retries: 2
                        per_try_timeout: 10s
              http_filters:
              # External authorization via Authorino (gRPC)
              # Headers are automatically included in gRPC CheckRequest by default
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino_cluster
                    timeout: 5s
                  failure_mode_allow: false
                  status_on_error:
                    code: 503

              # Lua filter to transform username into rh-identity header
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Escape special characters for JSON strings
                    function escape_json(str)
                      if str == nil then
                        return ""
                      end
                      -- Escape backslash first to avoid double-escaping
                      str = string.gsub(str, '\\', '\\\\')
                      -- Escape double quotes
                      str = string.gsub(str, '"', '\\"')
                      -- Escape control characters
                      str = string.gsub(str, '\n', '\\n')
                      str = string.gsub(str, '\r', '\\r')
                      str = string.gsub(str, '\t', '\\t')
                      return str
                    end

                    function envoy_on_request(request_handle)
                      -- Get the authenticated username from Authorino
                      local username = request_handle:headers():get("x-auth-username")

                      if username ~= nil and username ~= "" then
                        -- Escape username for safe JSON embedding
                        local username_escaped = escape_json(username)

                        -- Build rh-identity JSON structure
                        local identity_json = string.format([[{
                          "identity": {
                            "org_id": "1",
                            "account_number": "1",
                            "type": "User",
                            "user": {
                              "username": "%s",
                              "email": "",
                              "first_name": "",
                              "last_name": "",
                              "is_active": true,
                              "is_org_admin": false,
                              "is_internal": false,
                              "locale": "en_US"
                            },
                            "internal": {
                              "org_id": "1",
                              "auth_type": "kubernetes-tokenreview",
                              "auth_time": 0
                            }
                          }
                        }]], username_escaped)

                        -- Base64 encode the JSON
                        local b64_identity = request_handle:base64Escape(identity_json)

                        -- Set the X-Rh-Identity header
                        request_handle:headers():add("x-rh-identity", b64_identity)

                        -- Remove the temporary header from Authorino
                        request_handle:headers():remove("x-auth-username")
                        request_handle:headers():remove("x-auth-uid")
                      end
                    end

              # Compression filter for response optimization
              - name: envoy.filters.http.compressor
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor
                  response_direction_config:
                    common_config:
                      min_content_length: 1024
                      content_type:
                      - application/json
                      - application/javascript
                      - text/css
                      - text/html
                      - text/plain
                      - text/xml
                    disable_on_etag_header: true
                  compressor_library:
                    name: text_optimized
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.compression.gzip.compressor.v3.Gzip
                      memory_level: 6
                      window_bits: 12
                      compression_level: BEST_SPEED

              # Router filter (must be last)
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      # ROS OCP API backend (port 8000)
      - name: rosocp-api-backend
        connect_timeout: 5s
        type: STATIC
        load_assignment:
          cluster_name: rosocp-api-backend
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8000
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 1024
            max_pending_requests: 1024
            max_requests: 1024
            max_retries: 3
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: "/status"
            expected_statuses:
            - start: 200
              end: 299

      # Authorino cluster for external authorization (gRPC with TLS)
      - name: authorino_cluster
        connect_timeout: 1s
        type: LOGICAL_DNS
        # Respect DNS TTL
        dns_lookup_family: V4_ONLY
        load_assignment:
          cluster_name: authorino_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: authorino-authorino-authorization.{{ .Release.Namespace }}.svc.cluster.local
                    port_value: 50051
        # TLS configuration for secure communication with Authorino
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            # SNI for proper certificate validation
            sni: authorino-authorino-authorization.{{ .Release.Namespace }}.svc.cluster.local
        # HTTP/2 for gRPC
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}

    admin:
      address:
        socket_address:
          address: 127.0.0.1  # Restricted to localhost only
          port_value: {{ .Values.jwt_auth.envoy.adminPort }}
{{- end }}
