{{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
{{- $keycloakUrl := .Values.jwt_auth.keycloak.url | default (include "ros-ocp.keycloak.url" .) }}
{{- $issuerUrl := include "ros-ocp.keycloak.issuerUrl" . }}
{{- $jwksUrl := include "ros-ocp.keycloak.jwksUrl" . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-envoy-config-rosocp-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: rosocp-api-envoy
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.jwt_auth.envoy.port }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: rosocp_api_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                - name: backend
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: rosocp-api-backend
              http_filters:
              # JWT authentication filter
              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
                    keycloak:
                      issuer: {{ $issuerUrl }}
                      audiences:
                      {{- range .Values.jwt_auth.keycloak.audiences }}
                        - {{ . }}
                      {{- end }}
                      remote_jwks:
                        http_uri:
                          uri: {{ $jwksUrl }}
                          cluster: keycloak_jwks
                          timeout: 5s
                        cache_duration:
                          seconds: 300
                      forward: true
                      forward_payload_header: jwt-payload
                      payload_in_metadata: keycloak
                  rules:
                  - match:
                      prefix: "/"
                    requires:
                      provider_name: keycloak

              # Lua filter to extract JWT claims and inject X-Rh-Identity header
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Helper function to get claim value with fallbacks
                    local function get_claim(payload, ...)
                      for _, key in ipairs({...}) do
                        if payload[key] ~= nil and payload[key] ~= "" then
                          return tostring(payload[key])
                        end
                      end
                      return ""
                    end

                    -- Helper function to build JSON manually (no json lib in Envoy Lua)
                    local function build_xrhid_json(org_id, account_number, user_type)
                      -- Escape any quotes in values
                      local function escape_json(str)
                        return string.gsub(str, '"', '\\"')
                      end

                      org_id = escape_json(org_id)
                      account_number = escape_json(account_number)
                      user_type = escape_json(user_type)

                      return string.format('{"identity":{"org_id":"%s","account_number":"%s","type":"%s"}}',
                                          org_id, account_number, user_type)
                    end

                    function envoy_on_request(request_handle)
                      -- Get JWT payload from dynamic metadata (set by jwt_authn filter)
                      local metadata = request_handle:streamInfo():dynamicMetadata()
                      local jwt_metadata = metadata:get("envoy.filters.http.jwt_authn")

                      if jwt_metadata == nil then
                        request_handle:logWarn("No JWT metadata found")
                        return
                      end

                      -- Extract JWT payload from the keycloak provider
                      local jwt_data = jwt_metadata["keycloak"]
                      if jwt_data == nil then
                        request_handle:logWarn("No JWT data found for keycloak provider in metadata")
                        return
                      end

                      -- Extract org_id with fallbacks
                      local org_id = get_claim(jwt_data, "org_id", "organization_id", "tenant_id")
                      if org_id == "" then
                        -- Fallback: extract from clientId (format: org-<id>-client)
                        local client_id = get_claim(jwt_data, "clientId", "azp", "client_id")
                        org_id = string.match(client_id, "^org%-(%d+)%-") or "0"
                      end

                      -- Extract account_number with fallbacks
                      local account_number = get_claim(jwt_data, "account_number", "account_id", "account")
                      if account_number == "" then
                        account_number = org_id  -- Fallback to org_id
                      end

                      -- Build and encode X-Rh-Identity header
                      local xrhid_json = build_xrhid_json(org_id, account_number, "User")
                      local xrhid_b64 = request_handle:base64Escape(xrhid_json)

                      -- Inject X-Rh-Identity header (for standard identity-based systems)
                      request_handle:headers():add("X-Rh-Identity", xrhid_b64)

                      -- Inject headers for insights-ros-ingress app (expects JWT token directly)
                      request_handle:headers():add("X-ROS-Authenticated", "true")
                      -- Forward the original Authorization header as X-Bearer-Token
                      local auth_header = request_handle:headers():get("authorization")
                      if auth_header then
                        -- Extract Bearer token from Authorization header
                        local bearer_token = string.match(auth_header, "^Bearer%s+(.+)$")
                        if bearer_token then
                          request_handle:headers():add("X-Bearer-Token", bearer_token)
                        end
                      end

                      -- Log for debugging
                      request_handle:logInfo(string.format("JWT Authentication successful - org_id: %s, account: %s",
                                                           org_id, account_number))
                    end

              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      # ROS OCP API backend (port 8000)
      - name: rosocp-api-backend
        connect_timeout: 5s
        type: STATIC
        load_assignment:
          cluster_name: rosocp-api-backend
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8000

      # Keycloak JWKS endpoint for JWT signature verification
      - name: keycloak_jwks
        connect_timeout: 5s
        type: STRICT_DNS
        load_assignment:
          cluster_name: keycloak_jwks
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /etc/ca-certificates/ca-bundle.crt
                match_typed_subject_alt_names:
                  - san_type: DNS
                    matcher:
                      exact: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}

    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ .Values.jwt_auth.envoy.adminPort }}
{{- end }}

