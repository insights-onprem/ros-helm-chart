{{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
{{- $keycloakUrl := .Values.jwt_auth.keycloak.url | default (include "ros-ocp.keycloak.url" .) }}
{{- $issuerUrl := include "ros-ocp.keycloak.issuerUrl" . }}
{{- $jwksUrl := include "ros-ocp.keycloak.jwksUrl" . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-envoy-config-ingress
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: ingress-envoy
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.jwt_auth.envoy.port }}
        per_connection_buffer_limit_bytes: 32768
        connection_balance_config:
          exact_balance: {}
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              request_timeout: 60s
              stream_idle_timeout: 300s
              max_request_headers_kb: 96
              common_http_protocol_options:
                idle_timeout: 300s
                max_connection_duration: 600s
                headers_with_underscores_action: REJECT_REQUEST
              http2_protocol_options:
                max_concurrent_streams: 100
                initial_stream_window_size: 65536
                initial_connection_window_size: 1048576
              use_remote_address: true
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    json_format:
                      start_time: "%START_TIME%"
                      method: "%REQ(:METHOD)%"
                      path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                      protocol: "%PROTOCOL%"
                      response_code: "%RESPONSE_CODE%"
                      response_flags: "%RESPONSE_FLAGS%"
                      bytes_received: "%BYTES_RECEIVED%"
                      bytes_sent: "%BYTES_SENT%"
                      duration: "%DURATION%"
                      upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      user_agent: "%REQ(USER-AGENT)%"
                      request_id: "%REQ(X-REQUEST-ID)%"
                      authority: "%REQ(:AUTHORITY)%"
                      upstream_host: "%UPSTREAM_HOST%"
                      upstream_cluster: "%UPSTREAM_CLUSTER%"
              route_config:
                name: local_route
                virtual_hosts:
                - name: backend
                  # Wildcard domain appropriate for sidecar pattern:
                  # - External host validation occurs at OpenShift Route level
                  # - Envoy receives internal pod traffic (localhost/service names)
                  # - No host header injection risk in this architecture
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: ros-ingress-backend
                      timeout: 30s
                      retry_policy:
                        retry_on: 5xx,reset,connect-failure,refused-stream
                        num_retries: 2
                        per_try_timeout: 10s
              http_filters:
              # JWT authentication filter
              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
                    keycloak:
                      issuer: {{ $issuerUrl }}
                      audiences:
                      {{- range .Values.jwt_auth.keycloak.audiences }}
                        - {{ . }}
                      {{- end }}
                      remote_jwks:
                        http_uri:
                          uri: {{ $jwksUrl }}
                          cluster: keycloak_jwks
                          timeout: 5s
                        cache_duration:
                          seconds: 300
                      forward: true
                      # TODO: Review if forward_payload_header is needed for compatibility.
                      # Forwarding full JWT payload in headers poses information disclosure risk
                      # if backend services log headers. Consider removing in future if not required.
                      forward_payload_header: jwt-payload
                      payload_in_metadata: keycloak
                  rules:
                  - match:
                      prefix: "/"
                    requires:
                      provider_name: keycloak

              # Lua filter to extract JWT claims and inject X-Rh-Identity header
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Helper function to get claim value with fallbacks
                    local function get_claim(payload, ...)
                      for _, key in ipairs({...}) do
                        if payload[key] ~= nil and payload[key] ~= "" then
                          return tostring(payload[key])
                        end
                      end
                      return ""
                    end

                    -- Helper function to validate org_id and account_number
                    local function validate_identifier(value, field_name, max_length)
                      max_length = max_length or 128  -- Default max length

                      if value == "" then
                        return false, field_name .. " is empty"
                      end

                      if #value > max_length then
                        return false, field_name .. " exceeds maximum length of " .. max_length
                      end

                      -- Only allow alphanumeric, dashes, underscores, and dots
                      if not string.match(value, "^[a-zA-Z0-9._-]+$") then
                        return false, field_name .. " contains invalid characters"
                      end

                      return true, nil
                    end

                    -- Helper function to build JSON manually (no json lib in Envoy Lua)
                    local function build_xrhid_json(org_id, account_number, user_type)
                      -- Properly escape JSON special characters
                      local function escape_json(str)
                        if type(str) ~= "string" then
                          str = tostring(str)
                        end
                        str = string.gsub(str, "\\", "\\\\")  -- Backslash first
                        str = string.gsub(str, '"', '\\"')    -- Double quote
                        str = string.gsub(str, "\n", "\\n")   -- Newline
                        str = string.gsub(str, "\r", "\\r")   -- Carriage return
                        str = string.gsub(str, "\t", "\\t")   -- Tab
                        str = string.gsub(str, "\b", "\\b")   -- Backspace
                        str = string.gsub(str, "\f", "\\f")   -- Form feed
                        return str
                      end

                      org_id = escape_json(org_id)
                      account_number = escape_json(account_number)
                      user_type = escape_json(user_type)

                      return string.format('{"identity":{"org_id":"%s","account_number":"%s","type":"%s"}}',
                                          org_id, account_number, user_type)
                    end

                    function envoy_on_request(request_handle)
                      -- Wrap entire function in error handler to prevent crashes
                      local success, err = pcall(function()
                        -- Get JWT payload from dynamic metadata (set by jwt_authn filter)
                        local metadata = request_handle:streamInfo():dynamicMetadata()
                        local jwt_metadata = metadata:get("envoy.filters.http.jwt_authn")

                      if jwt_metadata == nil then
                        request_handle:logWarn("No JWT metadata found")
                        request_handle:respond(
                          {[":status"] = "401"},
                          "Unauthorized: No JWT metadata found"
                        )
                        return
                      end

                      -- Extract JWT payload from the keycloak provider
                      local jwt_data = jwt_metadata["keycloak"]
                      if jwt_data == nil then
                        request_handle:logWarn("No JWT data found for keycloak provider in metadata")
                        request_handle:respond(
                          {[":status"] = "401"},
                          "Unauthorized: No JWT data found for keycloak provider"
                        )
                        return
                      end

                      -- Extract org_id with fallbacks
                      local org_id = get_claim(jwt_data, "org_id", "organization_id", "tenant_id")
                      if org_id == "" then
                        request_handle:logWarn("Missing org_id in JWT claims")
                        request_handle:respond(
                          {[":status"] = "401"},
                          "Unauthorized: Missing organization ID in JWT claims"
                        )
                        return
                      end

                      -- Validate org_id
                      local valid, err_msg = validate_identifier(org_id, "org_id")
                      if not valid then
                        request_handle:logWarn("Invalid org_id: " .. err_msg)
                        request_handle:respond(
                          {[":status"] = "401"},
                          "Unauthorized: Invalid organization ID"
                        )
                        return
                      end

                      -- Extract account_number with fallbacks
                      local account_number = get_claim(jwt_data, "account_number", "account_id", "account")
                      if account_number == "" then
                        account_number = org_id  -- Fallback to org_id
                      end

                      -- Validate account_number
                      local valid, err_msg = validate_identifier(account_number, "account_number")
                      if not valid then
                        request_handle:logWarn("Invalid account_number: " .. err_msg)
                        request_handle:respond(
                          {[":status"] = "401"},
                          "Unauthorized: Invalid account number"
                        )
                        return
                      end

                      -- Build and encode X-Rh-Identity header
                      local xrhid_json = build_xrhid_json(org_id, account_number, "User")
                      local xrhid_b64 = request_handle:base64Escape(xrhid_json)

                      -- Inject X-Rh-Identity header (for standard identity-based systems)
                      -- Use replace to avoid duplicate headers
                      request_handle:headers():replace("X-Rh-Identity", xrhid_b64)

                      -- Inject headers for insights-ros-ingress app (expects JWT token directly)
                      request_handle:headers():replace("X-ROS-Authenticated", "true")

                      -- Forward the original Authorization header as X-Bearer-Token
                      -- Try both capitalization variants for case-insensitive lookup
                      local auth_header = request_handle:headers():get("authorization")
                      if not auth_header then
                        auth_header = request_handle:headers():get("Authorization")
                      end

                      if auth_header then
                        -- Extract Bearer token from Authorization header
                        local bearer_token = string.match(auth_header, "^[Bb]earer%s+(.+)$")
                        if bearer_token and bearer_token ~= "" then
                          request_handle:headers():replace("X-Bearer-Token", bearer_token)
                        end
                      end

                        -- Log for debugging (redact sensitive data)
                        local masked_org = string.sub(org_id, 1, 4) .. "***"
                        request_handle:logInfo(string.format("JWT Authentication successful - org_id: %s", masked_org))
                      end)

                      -- Handle any errors that occurred
                      if not success then
                        request_handle:logErr("Lua filter error: " .. tostring(err))
                        request_handle:respond(
                          {[":status"] = "500"},
                          "Internal Server Error: Authentication processing failed"
                        )
                      end
                    end

              # Compression filter for response optimization
              - name: envoy.filters.http.compressor
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor
                  response_direction_config:
                    common_config:
                      min_content_length: 1024
                      content_type:
                      - application/json
                      - application/javascript
                      - text/css
                      - text/html
                      - text/plain
                      - text/xml
                    disable_on_etag_header: true
                  compressor_library:
                    name: text_optimized
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.compression.gzip.compressor.v3.Gzip
                      memory_level: 6
                      window_bits: 12
                      compression_level: BEST_SPEED

              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      # Ingress backend (port 8081 when JWT enabled)
      - name: ros-ingress-backend
        connect_timeout: 5s
        type: STATIC
        load_assignment:
          cluster_name: ros-ingress-backend
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8081
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 1024
            max_pending_requests: 1024
            max_requests: 1024
            max_retries: 3
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: "/health"
            expected_statuses:
            - start: 200
              end: 299

      # Keycloak JWKS endpoint for JWT signature verification
      - name: keycloak_jwks
        connect_timeout: 5s
        type: STRICT_DNS
        dns_refresh_rate: 30s
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 512
            max_pending_requests: 512
            max_requests: 512
        load_assignment:
          cluster_name: keycloak_jwks
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}
            common_tls_context:
              tls_params:
                tls_minimum_protocol_version: TLSv1_2
                tls_maximum_protocol_version: TLSv1_3
                cipher_suites:
                - ECDHE-ECDSA-AES128-GCM-SHA256
                - ECDHE-RSA-AES128-GCM-SHA256
                - ECDHE-ECDSA-AES256-GCM-SHA384
                - ECDHE-RSA-AES256-GCM-SHA384
                - ECDHE-ECDSA-CHACHA20-POLY1305
                - ECDHE-RSA-CHACHA20-POLY1305
              validation_context:
                trusted_ca:
                  filename: /etc/ca-certificates/ca-bundle.crt
                match_typed_subject_alt_names:
                  - san_type: DNS
                    matcher:
                      exact: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}

    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ .Values.jwt_auth.envoy.adminPort }}
{{- end }}

