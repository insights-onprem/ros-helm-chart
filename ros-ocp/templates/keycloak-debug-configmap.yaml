{{- if .Values.jwt_auth.enabled }}
{{/*
Debug ConfigMap to show Keycloak auto-detection results
This will be created when JWT auth is enabled to help troubleshoot Keycloak detection
*/}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-keycloak-debug
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
data:
  keycloak-detection-results.yaml: |
    # Keycloak Auto-Detection Results (Using Keycloak CRs)
    # ====================================================

    # Detection Results:
    keycloak_installed: {{ include "ros-ocp.keycloak.isInstalled" . | quote }}
    keycloak_namespace: {{ include "ros-ocp.keycloak.namespace" . | quote }}
    keycloak_service_name: {{ include "ros-ocp.keycloak.serviceName" . | quote }}
    keycloak_auto_url: {{ include "ros-ocp.keycloak.url" . | quote }}

    # Keycloak CR Information:
{{ include "ros-ocp.keycloak.crInfo" . | indent 4 }}

    # Computed URLs:
    issuer_url: {{ include "ros-ocp.keycloak.issuerUrl" . | quote }}
    jwks_url: {{ include "ros-ocp.keycloak.jwksUrl" . | quote }}

    # Configuration Used:
    jwt_auth_enabled: {{ .Values.jwt_auth.enabled | quote }}
    manual_base_url: {{ .Values.jwt_auth.keycloak.issuer.baseUrl | quote }}
    realm: {{ .Values.jwt_auth.keycloak.issuer.realm | quote }}

    # Platform Detection:
    is_openshift: {{ include "ros-ocp.isOpenShift" . | quote }}

    # Authorino Configuration:
    authorino_deploy_enabled: {{ .Values.jwt_auth.authorino.deploy.enabled | quote }}
    authorino_image: {{ .Values.jwt_auth.authorino.deploy.image.repository }}:{{ .Values.jwt_auth.authorino.deploy.image.tag }}
    authorino_namespace: {{ include "ros-ocp.authorino.namespace" . | quote }}
    authorino_service: {{ include "ros-ocp.authorino.serviceName" . | quote }}
    authorino_fqdn: {{ include "ros-ocp.authorino.fqdn" . | quote }}
    authorino_port: {{ include "ros-ocp.authorino.port" . | quote }}

    # How to use this information:
    # ============================
    # 1. Check if keycloak_installed is 'true'
    # 2. Look at 'found' in CR info to see if Keycloak CRs were detected
    # 3. Check 'ready' status to ensure Keycloak is operational
    # 4. Verify keycloak_auto_url or externalURL points to your Keycloak instance
    # 5. If issuer_url looks correct, JWT auth should work
    # 6. If auto-detection fails, set jwt_auth.keycloak.issuer.baseUrl manually

    # Troubleshooting:
    # ================
    # - If keycloak_installed is 'false': No Keycloak CRs found, may not be installed via operator
    # - If 'found' is false but keycloak_installed is true: Using fallback namespace detection
    # - If 'ready' is false: Keycloak CR exists but instance may not be ready
    # - If keycloak_auto_url is empty: No route/ingress found, check Keycloak external access
    # - If issuer_url is wrong: Override with manual jwt_auth.keycloak.issuer.baseUrl

    # Detection Method Priority:
    # =========================
    # 1. Keycloak CRs (keycloaks.keycloak.org) - Most reliable
    # 2. CR status.externalURL - Direct from operator
    # 3. OpenShift Routes - Platform integration
    # 4. Kubernetes Ingresses - Platform integration
    # 5. Service discovery - Fallback method
{{- end }}
