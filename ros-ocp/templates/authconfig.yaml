{{- if and (eq (include "ros-ocp.jwt.shouldEnable" .) "true") .Values.jwt_auth.authorino.authConfig.create }}
apiVersion: authorino.kuadrant.io/v1beta3
kind: AuthConfig
metadata:
  name: {{ .Values.jwt_auth.authorino.authConfig.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
spec:
  # Host patterns that this auth applies to
  hosts:
  - "{{ include "ros-ocp.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
  - "{{ include "ros-ocp.fullname" . }}"
  {{- if and .Values.global .Values.global.platform .Values.global.platform.openshift }}
  # OpenShift external route (for external JWT validation)
  - "ros-ocp-ingress-{{ .Release.Namespace }}.{{ .Values.global.platform.domain | default "apps.cluster.local" }}"
  {{- end }}

  # JWT Authentication configuration using Keycloak
  authentication:
    "keycloak-jwt":
      jwt:
        issuerUrl: {{ include "ros-ocp.keycloak.issuerUrl" . }}
        # Note: TLS configuration for Red Hat operator must be done at Authorino instance level,
        # not at AuthConfig level. See authorino-instance.yaml for TLS settings.
      credentials:
        authorizationHeader:
          prefix: Bearer

  # Authorization - allow all authenticated users
  authorization:
    "allow-authenticated":
      patternMatching:
        patterns:
        - selector: auth.identity.sub
          operator: neq
          value: ""

  # Response configuration using Red Hat Authorino 'plain' format
  response:
    success:
      headers:
        # Essential authentication headers using plain format
        "X-ROS-Authenticated":
          plain:
            value: "true"

        "X-ROS-User-ID":
          plain:
            selector: auth.identity.sub

        "X-Client-ID":
          plain:
            selector: auth.identity.azp

        "X-ROS-User-Name":
          plain:
            selector: auth.identity.preferred_username

        "X-ROS-Auth-Method":
          plain:
            value: "Authorino-JWT"

        # Forward JWT token to backend for further authorization
        "X-Bearer-Token":
          plain:
            selector: context.request.http.headers.authorization|@replace:{"old":"Bearer ","new":""}
{{- end }}
