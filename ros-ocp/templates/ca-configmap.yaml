{{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
{{- $keycloakUrl := .Values.jwt_auth.keycloak.url | default (include "ros-ocp.keycloak.url" .) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-keycloak-ca
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: ca-trust
  annotations:
    # Auto-inject OpenShift service CA if available
    {{- if and .Values.global .Values.global.platform .Values.global.platform.openshift }}
    service.beta.openshift.io/inject-cabundle: "true"
    {{- end }}
data:
  # Custom CA certificate for Keycloak (optional - will auto-fetch if not provided)
  {{- if and .Values.jwt_auth.keycloak .Values.jwt_auth.keycloak.tls .Values.jwt_auth.keycloak.tls.caCert }}
  keycloak-ca.crt: |
{{ .Values.jwt_auth.keycloak.tls.caCert | indent 4 }}
  {{- else }}
  # No custom CA certificate provided - will dynamically fetch from Keycloak endpoint
  # This is the preferred approach as it works automatically in any environment
  keycloak-ca.crt: ""
  {{- end }}

  # Combined CA bundle script (run by init container)
  combine-ca.sh: |
    #!/bin/bash
    set -e

    echo "üîß Combining CA certificates for Envoy..."

    # Start with system CA bundle
    if [ -f /etc/ssl/certs/ca-bundle.crt ]; then
        echo "üìã Adding system CA bundle..."
        cat /etc/ssl/certs/ca-bundle.crt > /tmp/combined-ca.crt
    elif [ -f /etc/ssl/certs/ca-certificates.crt ]; then
        echo "üìã Adding system CA certificates..."
        cat /etc/ssl/certs/ca-certificates.crt > /tmp/combined-ca.crt
    else
        echo "‚ö†Ô∏è No system CA bundle found, starting with empty bundle"
        touch /tmp/combined-ca.crt
    fi

    echo "" >> /tmp/combined-ca.crt

    # Add service account CA (Kubernetes/OpenShift)
    if [ -f /var/run/secrets/kubernetes.io/serviceaccount/ca.crt ]; then
        echo "üìã Adding Kubernetes service account CA..."
        cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt >> /tmp/combined-ca.crt
        echo "" >> /tmp/combined-ca.crt
    fi

    # Add OpenShift service CA (if available)
    if [ -f /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt ]; then
        echo "üìã Adding OpenShift service CA..."
        cat /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt >> /tmp/combined-ca.crt
        echo "" >> /tmp/combined-ca.crt
    fi

    # Add custom Keycloak CA (if provided manually)
    if [ -f /ca-source/keycloak-ca.crt ] && [ -s /ca-source/keycloak-ca.crt ]; then
        # Validate it's a proper certificate
        if openssl x509 -in /ca-source/keycloak-ca.crt -noout -text >/dev/null 2>&1; then
            echo "üìã Adding manually provided Keycloak CA..."
            cat /ca-source/keycloak-ca.crt >> /tmp/combined-ca.crt
            echo "" >> /tmp/combined-ca.crt
            echo "‚ÑπÔ∏è  Using custom CA certificate from values.yaml"
        else
            echo "‚ö†Ô∏è  Invalid CA certificate in values.yaml, will try to fetch dynamically..."
        fi
    else
        echo "‚ÑπÔ∏è  No custom CA certificate provided in values.yaml (this is fine - will auto-fetch)"
    fi

    # Dynamically fetch Keycloak CA certificate from running instance if not already added
    KEYCLOAK_URL="{{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}"
    KEYCLOAK_CERT_COUNT_BEFORE=$(grep -c 'BEGIN CERTIFICATE' /tmp/combined-ca.crt 2>/dev/null || echo 0)
    if [ -n "$KEYCLOAK_URL" ]; then
        echo "üîç Attempting to fetch Keycloak CA certificate chain from $KEYCLOAK_URL..."

        # Extract the ENTIRE certificate chain from Keycloak endpoint (not just the leaf cert)
        # This is more robust as it includes intermediate CAs
        if timeout 10 openssl s_client -connect "$KEYCLOAK_URL:443" -showcerts </dev/null 2>/dev/null > /tmp/keycloak-chain.txt; then

            # Extract all certificates from the chain (not just the first one)
            # Split the chain into individual certificate files
            csplit -z -f /tmp/keycloak-cert- -b '%02d.crt' /tmp/keycloak-chain.txt '/-----BEGIN CERTIFICATE-----/' '{*}' 2>/dev/null || true

            # Add each valid certificate from the chain
            local added_count=0
            for cert_file in /tmp/keycloak-cert-*.crt; do
                if [ -f "$cert_file" ] && grep -q 'BEGIN CERTIFICATE' "$cert_file" 2>/dev/null; then
                    # Verify this is a valid certificate
                    if openssl x509 -in "$cert_file" -noout -text >/dev/null 2>&1; then
                        # Extract just the certificate (removes extra text from s_client output)
                        openssl x509 -in "$cert_file" -outform PEM >> /tmp/keycloak-validated.crt 2>/dev/null || true
                    fi
                fi
            done

            # If we successfully extracted certificates, add them to the bundle
            if [ -f /tmp/keycloak-validated.crt ] && [ -s /tmp/keycloak-validated.crt ]; then
                local new_cert_count=$(grep -c 'BEGIN CERTIFICATE' /tmp/keycloak-validated.crt 2>/dev/null || echo 0)

                if [ "$new_cert_count" -gt 0 ]; then
                    # Check if we already have a custom CA (avoid duplicates)
                    KEYCLOAK_CERT_COUNT_AFTER=$(grep -c 'BEGIN CERTIFICATE' /tmp/combined-ca.crt 2>/dev/null || echo 0)
                    if [ "$KEYCLOAK_CERT_COUNT_AFTER" -eq "$KEYCLOAK_CERT_COUNT_BEFORE" ]; then
                        echo "‚úÖ Successfully fetched Keycloak certificate chain ($new_cert_count certificates)"
                        cat /tmp/keycloak-validated.crt >> /tmp/combined-ca.crt
                        echo "" >> /tmp/combined-ca.crt

                        # Display certificate info for verification
                        echo "üìú Keycloak Certificate Chain Info:"
                        local cert_num=1
                        for cert_file in /tmp/keycloak-cert-*.crt; do
                            if [ -f "$cert_file" ] && grep -q 'BEGIN CERTIFICATE' "$cert_file" 2>/dev/null; then
                                if openssl x509 -in "$cert_file" -noout -text >/dev/null 2>&1; then
                                    echo "   Certificate $cert_num:"
                                    openssl x509 -in "$cert_file" -noout -subject -issuer 2>/dev/null | sed 's/^/     /' || true
                                    cert_num=$((cert_num + 1))
                                fi
                            fi
                        done
                    else
                        echo "‚ÑπÔ∏è  Keycloak CA already added from custom source, skipping dynamic fetch"
                    fi
                else
                    echo "‚ö†Ô∏è  No valid certificates extracted from Keycloak endpoint"
                fi
            else
                echo "‚ö†Ô∏è  Failed to extract certificates from Keycloak endpoint"
            fi

            # Cleanup temporary files
            rm -f /tmp/keycloak-chain.txt /tmp/keycloak-validated.crt /tmp/keycloak-cert-*.crt
        else
            echo "‚ö†Ô∏è  Could not connect to $KEYCLOAK_URL (may be using system CA or endpoint unreachable)"
            echo "   This is normal if Keycloak uses a certificate signed by a system-trusted CA"
        fi
    fi

    # Add injected OpenShift CA bundle (if available)
    if [ -f /ca-source/service-ca.crt ]; then
        echo "üìã Adding OpenShift injected CA bundle..."
        cat /ca-source/service-ca.crt >> /tmp/combined-ca.crt
        echo "" >> /tmp/combined-ca.crt
    fi

    # Copy to shared volume
    cp /tmp/combined-ca.crt /ca-output/ca-bundle.crt

    echo "‚úÖ Combined CA bundle created with $(grep -c 'BEGIN CERTIFICATE' /ca-output/ca-bundle.crt) certificates"
    echo "üìÑ CA bundle size: $(wc -c < /ca-output/ca-bundle.crt) bytes"

    # List CA sources for debugging
    echo "üîç CA sources included:"
    if grep -q "Kubernetes Service Account CA" /ca-output/ca-bundle.crt; then
        echo "   ‚úÖ Kubernetes Service Account CA"
    fi
    if grep -q "OpenShift Service CA" /ca-output/ca-bundle.crt; then
        echo "   ‚úÖ OpenShift Service CA"
    fi
    if grep -q "Keycloak Custom CA" /ca-output/ca-bundle.crt; then
        echo "   ‚úÖ Keycloak Custom CA (manually provided)"
    fi
    if grep -q "Keycloak Dynamically Fetched CA" /ca-output/ca-bundle.crt; then
        echo "   ‚úÖ Keycloak CA (dynamically fetched)"
    fi
    if grep -q "OpenShift Injected CA Bundle" /ca-output/ca-bundle.crt; then
        echo "   ‚úÖ OpenShift Injected CA Bundle"
    fi
{{- end }}






