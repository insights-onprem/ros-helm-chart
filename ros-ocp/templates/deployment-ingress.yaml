{{/* Deploy ingress service on both Kubernetes and OpenShift */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ros-ocp.fullname" . }}-ingress
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: ingress
    app.kubernetes.io/name: ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: ingress
      app.kubernetes.io/name: ingress
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: ingress
        app.kubernetes.io/name: ingress
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-storage
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            {{- if (eq (include "ros-ocp.isOpenShift" .) "false") }}
            - |
              echo "Waiting for MinIO at {{ include "ros-ocp.fullname" . }}-minio:{{ .Values.minio.ports.api }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-minio/{{ .Values.minio.ports.api }}" 2>/dev/null; do
                echo "MinIO not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "MinIO is ready"
            {{- else }}
            - |
              echo "Waiting for ODF S3 endpoint at {{ include "ros-ocp.storage.endpoint" . }}:{{ include "ros-ocp.storage.port" . }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.storage.endpoint" . }}/{{ include "ros-ocp.storage.port" . }}" 2>/dev/null; do
                echo "ODF S3 endpoint not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "ODF S3 endpoint is ready"
            {{- end }}
        - name: wait-for-kafka
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for Kafka at {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-kafka/{{ .Values.kafka.broker.port }}" 2>/dev/null; do
                echo "Kafka not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "Kafka is ready"
      serviceAccountName: insights-ros-ingress
      containers:
        {{- if .Values.jwt_auth.enabled }}
        # Envoy sidecar for native JWT authentication
        - name: envoy-proxy
          image: "{{ .Values.jwt_auth.envoy.image.repository }}:{{ .Values.jwt_auth.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: http-proxy
              containerPort: {{ .Values.jwt_auth.envoy.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.jwt_auth.envoy.adminPort }}
              protocol: TCP
          command:
            - /usr/local/bin/envoy
          args:
            - -c
            - /etc/envoy/envoy.yaml
            - --log-level
            - {{ .Values.jwt_auth.envoy.logLevel | default "info" }}
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
              readOnly: true
          livenessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.jwt_auth.envoy.adminPort }}
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.jwt_auth.envoy.adminPort }}
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
        {{- end }}
        - name: ingress
          image: "{{ .Values.ingress.image.repository }}:{{ .Values.ingress.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: {{- if .Values.jwt_auth.enabled }} http-ingress {{- else }} http {{- end }}
              containerPort: {{- if .Values.jwt_auth.enabled }} 8081 {{- else }} {{ .Values.ingress.port }} {{- end }}
              protocol: TCP
          env:
            # Server configuration
            - name: SERVER_PORT
              value: {{- if .Values.jwt_auth.enabled }} "8081" {{- else }} {{ .Values.ingress.server.port | quote }} {{- end }}
            - name: SERVER_READ_TIMEOUT
              value: {{ .Values.ingress.server.readTimeout | quote }}
            - name: SERVER_WRITE_TIMEOUT
              value: {{ .Values.ingress.server.writeTimeout | quote }}
            - name: SERVER_IDLE_TIMEOUT
              value: {{ .Values.ingress.server.idleTimeout | quote }}
            - name: DEBUG
              value: {{ .Values.ingress.server.debug | quote }}

            # Upload configuration
            - name: UPLOAD_MAX_SIZE
              value: {{ .Values.ingress.upload.maxUploadSize | quote }}
            - name: UPLOAD_MAX_MEMORY
              value: {{ .Values.ingress.upload.maxMemory | quote }}
            - name: UPLOAD_TEMP_DIR
              value: {{ .Values.ingress.upload.tempDir | quote }}
            - name: UPLOAD_ALLOWED_TYPES
              value: {{ join "," .Values.ingress.upload.allowedTypes | quote }}
            - name: UPLOAD_REQUIRE_AUTH
              value: {{- if .Values.jwt_auth.enabled }} "true" {{- else }} {{ .Values.ingress.upload.requireAuth | quote }} {{- end }}

            # Storage configuration
            - name: STORAGE_ENDPOINT
              value: {{ include "ros-ocp.storage.endpoint" . }}
            - name: STORAGE_BUCKET
              value: {{ include "ros-ocp.storage.bucket" . | quote }}
            - name: STORAGE_USE_SSL
              value: {{ include "ros-ocp.storage.useSSL" . | quote }}
            - name: STORAGE_URL_EXPIRATION
              value: {{ .Values.ingress.storage.urlExpiration | quote }}
            - name: STORAGE_PATH_PREFIX
              value: {{ .Values.ingress.storage.pathPrefix | quote }}
            {{- if eq (include "ros-ocp.isOpenShift" .) "true" }}
            - name: STORAGE_SSL_CA_CERT_PATH
              value: "/etc/ssl/certs/service-ca.crt"
            {{- end }}
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-storage-credentials
                  key: access-key
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-storage-credentials
                  key: secret-key

            # Kafka configuration
            - name: KAFKA_BROKERS
              value: {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}
            - name: KAFKA_ROS_TOPIC
              value: {{ .Values.ingress.kafka.topic | quote }}
            - name: KAFKA_SECURITY_PROTOCOL
              value: {{ .Values.ingress.kafka.securityProtocol | quote }}
            - name: KAFKA_CLIENT_ID
              value: {{ .Values.ingress.kafka.clientId | quote }}
            - name: KAFKA_BATCH_SIZE
              value: {{ .Values.ingress.kafka.batchSize | quote }}
            - name: KAFKA_RETRIES
              value: {{ .Values.ingress.kafka.retries | quote }}

            # Authentication configuration (only available on OpenShift with Keycloak)
            - name: AUTH_ENABLED
              {{- if .Values.jwt_auth.enabled }}
              value: "true"  # Auth is enabled via Envoy native JWT, service trusts X-ROS headers
              {{- else if eq (include "ros-ocp.isOpenShift" .) "true" }}
              value: {{ .Values.ingress.auth.enabled | quote }}
              {{- else }}
              value: "false"
              {{- end }}
            # Logging configuration
            - name: LOG_LEVEL
              value: {{ .Values.ingress.logging.level | quote }}
            - name: LOG_FORMAT
              value: {{ .Values.ingress.logging.format | quote }}
            - name: LOG_OUTPUT
              value: {{ .Values.ingress.logging.output | quote }}

            # Metrics configuration
            - name: METRICS_ENABLED
              value: {{ .Values.ingress.metrics.enabled | quote }}
            - name: METRICS_PATH
              value: {{ .Values.ingress.metrics.path | quote }}
            - name: METRICS_PORT
              value: {{ .Values.ingress.metrics.port | quote }}

          livenessProbe:
            httpGet:
              path: /health
              port: {{- if .Values.jwt_auth.enabled }} 8081 {{- else }} {{ .Values.ingress.port }} {{- end }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{- if .Values.jwt_auth.enabled }} 8081 {{- else }} {{ .Values.ingress.port }} {{- end }}
            initialDelaySeconds: 10
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.application | nindent 12 }}
          {{- if eq (include "ros-ocp.isOpenShift" .) "true" }}
          volumeMounts:
            - name: service-ca-cert
              mountPath: /etc/ssl/certs/service-ca.crt
              subPath: service-ca.crt
              readOnly: true
          {{- end }}
      volumes:
        {{- if .Values.jwt_auth.enabled }}
        # Envoy configuration volume
        - name: envoy-config
          configMap:
            name: {{ include "ros-ocp.fullname" . }}-envoy-config
            items:
              - key: envoy.yaml
                path: envoy.yaml
        {{- end }}
        {{- if eq (include "ros-ocp.isOpenShift" .) "true" }}
        - name: service-ca-cert
          configMap:
            name: {{ include "ros-ocp.fullname" . }}-service-ca
            items:
              - key: service-ca.crt
                path: service-ca.crt
        {{- end }}